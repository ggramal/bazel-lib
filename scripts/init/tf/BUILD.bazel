load("@rules_multirun//:defs.bzl", "command", "multirun")
load("@svetoch_bazel_lib//scripts/init/tf/apply:apply.bzl", "get_apply_args")
load("@svetoch_bazel_lib//scripts/init/tf/poststeps:poststeps.bzl", "get_clean_args")
load("@svetoch_bazel_lib//scripts/init/tf/prepare:prepare.bzl", "get_prepare_args")
load("@svetoch_bazel_lib//scripts/init/tf/secrets:secrets.bzl", "get_secrets_args")
load("@svetoch_bazel_lib//scripts/init/tf/state:state.bzl", "get_create_state_args")

_, prepare_args = get_prepare_args()

_, create_state_args = get_create_state_args()

apply_args = get_apply_args()

secrets_args = get_secrets_args()

clean_args = get_clean_args()

command(
    name = "prepare",
    arguments = prepare_args,
    command = "@svetoch_bazel_lib//scripts/init/tf/prepare",
)

command(
    name = "state_create",
    arguments = create_state_args,
    command = "@svetoch_bazel_lib//scripts/init/tf/state:create",
)

command(
    name = "initial_apply",
    arguments = apply_args,
    command = "@svetoch_bazel_lib//scripts/init/tf/apply:init",
)

command(
    name = "import_secrets",
    arguments = secrets_args,
    command = "@svetoch_bazel_lib//scripts/init/tf/secrets",
)

command(
    name = "cleanup",
    arguments = clean_args,
    command = "@svetoch_bazel_lib//scripts/init/tf/poststeps:clean",
)

multirun(
    name = "init",
    commands = [
        "prepare",
        "state_create",
        "initial_apply",
        "import_secrets",
        "cleanup",
    ],
    visibility = ["//visibility:public"],
)
